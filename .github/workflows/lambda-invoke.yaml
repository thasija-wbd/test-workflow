name: Lamda invoke Job

on:
  push:
    branches:
      - main
    paths:
      - job-definitions/**
permissions: write-all

jobs:
  checkout-step:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: job-definitions/**

      - name: List all added files
        run: |
          for file in job-definitions/new1.yaml; do
          echo "$file was added"
          done

          for file in job-definitions/example.yaml; do
          echo "$file was modified"
          done
      - name: Transform yaml to Json
        id: transform-yaml-to-json
        run: |
          echo Transform files
          added_files=()
          modified_files=()
          for file in ${{ steps.changed-files.outputs.added_files }}; do
          to_json=$(echo "$file" | sed 's/\.yaml$/.json/')
          yq eval -o=json "$file" > "$to_json"
          echo "Added: $to_json"
          added_files+=("$to_json")
          done
          echo ${to_added_json}
          for file in ${{ steps.changed-files.outputs.modified_files }}; do
          to_json=$(echo "$file" | sed 's/\.yaml$/.json/')
          yq eval -o=json "$file" > "$to_json"
          echo "Modified: $to_json"
          modified_files+=("$to_json")
          done
          echo "::set-output name=added_json::${added_files[@]}"
          echo "::set-output name=modified_json::${modified_files[@]}"

      - name: Convert json files to payload json
        run: |
          payload_files=()

          # For added files
          for file in "${{ steps.transform-yaml-to-json.outputs.added_json }}"; do
            json_content=$(cat "$file")  # Fix: Read content from the current file, not a constant variable
            event_payload=$(echo "$json_content" | jq -c '{"action": "CREATE", "payload": {"jobId": .metadata.id,"name":.metadata.name,"version":.metadata.version,"notValidAfter":.metadata.notValidAfter,"notValidBefore":.metadata.notValidBefore,"usageDataQueries":.spec.needsUsageData,"costDataQueries":.spec.costDataQueries,"calculationQuery":.spec.calculationQuery,"active":.metadata.active,"dryRun":.metadata.dryRun}}')
            payload_files+=("$event_payload")  # Fix: Add the payload to the array
            echo "$event_payload"  # Debugging: Print the payload
          done

          # For modified files
          for file in "${{ steps.transform-yaml-to-json.outputs.modified_json }}"; do
            json_content=$(cat "$file")  # Fix: Read content from the current file, not a constant variable
            event_payload=$(echo "$json_content" | jq -c '{"action": "UPDATE", "payload": {"jobId": .metadata.id,"name":.metadata.name,"version":.metadata.version,"notValidAfter":.metadata.notValidAfter,"notValidBefore":.metadata.notValidBefore,"usageDataQueries":.spec.needsUsageData,"costDataQueries":.spec.costDataQueries,"calculationQuery":.spec.calculationQuery,"active":.metadata.active,"dryRun":.metadata.dryRun}}')
            payload_files+=("$event_payload")  # Fix: Add the payload to the array
            echo "$event_payload"  # Debugging: Print the payload
          done

          echo "${payload_files[@]}"  # Fix: Print all payloads in the array

      # - name: Echo CREATE LAMBDA
      #   if: steps.changed-files.outputs.modified_files_count != '0'
      #   run: |
      #     echo CREATE LAMBDA
      # - name: Echo UPDATE LAMBDA
      #   if: steps.changed-files.outputs.modified_files_count == '0'
      #   run: |
      #     echo UPDATE LAMBDA
      # - name: Configure AWS creds
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: arn:aws:iam::${{ inputs.account-id }}:role/github-actions-service-catalog-metering
      #     role-session-name: deploysession
      #     aws-region: us-east-1
      # - name: Invoke AWS Lambda Function
      #   if: ${{ inputs.payload == 'Clear Synchronizer execution history table' || inputs.payload == 'Clear all' }}
      #   run: |
      #     aws lambda invoke \
      #     --function-name gsm-qacleanup-${{ fromJSON(steps.environment.outputs.data).environment_short_name }}-CleanUp \
      #     --cli-binary-format raw-in-base64-out \
      #     --payload file://payload.json \
      #     response.json
