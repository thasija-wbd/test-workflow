name: Lamda invoke Job

on:
  push:
    branches:
      - main
    paths:
      - job-definitions/**
permissions: write-all

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      payload_json: ${{steps.create-json.outputs.payload_json}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: job-definitions/**
      - name: List all added files
        run: |
          for file in ${{steps.changed-files.outputs.added_files}}; do
          echo "$file was added"
          done
          for file in ${{ steps.changed-files.outputs.modified_files }}; do
          echo "$file was modified"
          done
      - name: Create JSON payload
        id: create-json
        run: |
          added_files="${{ steps.changed-files.outputs.added_files }}"
          modified_files="${{ steps.changed-files.outputs.modified_files }}"
          added_files_count="${{ steps.changed-files.outputs.added_files_count }}"
          modified_files_count="${{ steps.changed-files.outputs.modified_files_count }}"
          payload='{"payload": ['
          payload+="{\"files\": \"$added_files\", \"count\": \"$added_files_count\", \"action\": \"CREATE\"},"
          payload+="{\"files\": \"$modified_files\", \"count\": \"$modified_files_count\", \"action\": \"UPDATE\"}"
          payload+=']}'
          echo "::set-output name=payload_json::$payload"

  persist-job:
    runs-on: ubuntu-latest
    needs: [checkout]
    strategy:
      matrix:
        include: ${{fromJson(needs.checkout.outputs.payload_json).payload}}
    steps:
      - name: Transform yaml to Json
        env:
          MATRIX: ${{ toJSON(matrix) }}
          FILES: ${{ fromJSON(toJSON(matrix)).files }}
          ACTION: ${{fromJSON(toJSON(matrix)).action}}
        if: ${{ fromJSON(toJSON(matrix)).count }} != '0'
        id: transform-yaml-to-json
        run: |
          echo Transform files
          echo $MATRIX
          echo $FILES
          echo $ACTION
          files=()
          for FILE in $FILES; do
            trimmed_file=$(echo "$FILE" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            json_file="${FILE%.yml}.json"
            yq -o=json "$trimmed_file" > "$json_file"
            echo "Converted JSON content saved to $json_file"
            files+=("$json_file")

          done
          echo $files
          echo "::set-output name=json_file::${files[@]}"
      # - name: Configure AWS creds
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: arn:aws:iam::076787413861:role/test-iam
      #     role-session-name: deploysession
      #     aws-region: us-east-1

      # - name: Convert json files to payload json
      #   id: parse-payload
      #   run: |
      #     payload_files=()
      #     # For added files
      #     echo "${{ steps.transform-yaml-to-json.outputs.added_json }}"
      #     echo "${{ steps.transform-yaml-to-json.outputs.modified_json }}"

      #     if [[ -n "${{ steps.transform-yaml-to-json.outputs.added_json }}" ]]; then
      #       IFS=' ' read -ra added_files <<< "${{ steps.transform-yaml-to-json.outputs.added_json }}"
      #       for file in "${added_files[@]}"; do
      #         echo "${file}"
      #         json_content=$(cat "$file")
      #         echo "ADDED ${json_content}"
      #         event_payload=$(echo "$json_content" | jq -c '{"action": "CREATE", "payload": {"jobId": .metadata.id,"name":.metadata.name,"version":.metadata.version,"notValidAfter":.metadata.notValidAfter,"notValidBefore":.metadata.notValidBefore,"usageDataQueries":.spec.needsUsageData,"costDataQueries":.spec.costDataQueries,"calculationQuery":.spec.calculationQuery,"active":.metadata.active,"dryRun":.metadata.dryRun}}')
      #         payload_files+=("$event_payload")
      #       done
      #     fi

      #     # For modified files
      #     if [[ -n "${{ steps.transform-yaml-to-json.outputs.modified_json }}" ]]; then
      #       IFS=' ' read -ra modified_files <<< "${{ steps.transform-yaml-to-json.outputs.modified_json }}"
      #       for file in "${modified_files[@]}"; do
      #         echo "${file}"
      #         json_content=$(cat "$file")
      #         echo "UPDATED ${json_content}"
      #         event_payload=$(echo "$json_content" | jq -c '{"action": "UPDATE", "payload": {"jobId": .metadata.id,"name":.metadata.name,"version":.metadata.version,"notValidAfter":.metadata.notValidAfter,"notValidBefore":.metadata.notValidBefore,"usageDataQueries":.spec.needsUsageData,"costDataQueries":.spec.costDataQueries,"calculationQuery":.spec.calculationQuery,"active":.metadata.active,"dryRun":.metadata.dryRun}}')
      #         payload_files+=("$event_payload")
      #       done
      #     fi
      #     # API CALL
      #     for payload_file in "${payload_files[@]}"; do
      #     aws lambda invoke \
      #     --function-name test-function \
      #     --cli-binary-format raw-in-base64-out \
      #     --payload "${payload_file}" \
      #     response.json
      #     done
      #     echo '::set-output name=value::[\"a\", \"b\", \"c\"]'
