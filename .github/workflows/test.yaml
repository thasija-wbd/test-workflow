name: convert-yaml-to-json

on:
  push:
    branches:
      - main
    paths:
      - "job-definitions/**"

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2 # Ensure the entire Git history is available

      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:rmescandon/yq -y
          sudo apt-get update
          sudo apt-get install yq -y
          sudo apt-get install jq

      - name: Detect changed YAML files
        id: detect-changed-yaml
        run: |
          CHANGED_YAML=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} -- job-definitions/**)
          CHANGED_YAML_COUNT=$(echo "$CHANGED_YAML" | wc -l)
          echo "Changed YAML files: $CHANGED_YAML_COUNT"
          echo "changed yaml : $CHANGED_YAML"
          concatenated_lines=""
          for ((i=1; i<=CHANGED_YAML_COUNT; i++)); do
             YAML_CONTENT=$(cat "$CHANGED_YAML")
             concatenated_lines="${concatenated_lines}${YAML_CONTENT} -------"
             echo ${concatenated_lines}
          done
          concatenated_lines="${concatenated_lines%-------}"
          echo "Concatenated lines $concatenated_lines"
          echo "::set-output name=changed_yaml::$concatenated_lines"
      - name: calling custom-action-to-test
        uses: thasija-wbd/test-custom-action@v0.0.2
        with:
          yaml_files: ${{steps.detect-changed-yaml.outputs.changed_yaml}}

      # - name: Convert YAML to JSON
      #   id: convert-yaml-to-json
      #   run: |
      #     JSON_FILES=()
      #     IFS='|' read -ra files_array <<< "${{steps.detect-changed-yaml.outputs.changed_yaml}}"
      #     for FILE in "${files_array[@]}"; do
      #       echo "Converting $FILE to JSON..."
      #       trimmed_file=$(echo "$FILE" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
      #       json_content=$(yq eval "$trimmed_file" -o=json)
      #       json_file="${FILE%.yml}.json"
      #       echo "$json_content" > "$json_file"
      #       echo "Converted JSON content saved to $json_file"
      #       JSON_FILES+=("$json_file")
      #     done
      #     echo "::set-output name=json_files::${JSON_FILES[@]}"

      # - name: Echo JSON files
      #   run: |
      #     for JSON_FILE in ${{ steps.convert-yaml-to-json.outputs.json_files }}; do
      #       json_content=$(cat "$JSON_FILE")
      #       echo $json_content
      #       id=$(echo "$json_content" | jq -r '.metadata.id')
      #       if [ -n "$variable" ] && [ "$variable" != "null" ] && [ "$variable" != "undefined" ]; then
      #         echo "ID is not present"
      #       else
      #         echo "ID is present: $id"
      #         event_payload=$(echo "$json_content" | jq -c '{"action": "UPDATE", "payload": {"jobId": .metadata.id,"name":.metadata.name}}')
      #         echo $event_payload
      #       fi
      #     done
